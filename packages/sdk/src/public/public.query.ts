/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Starter API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
  AuthLoginBody,
  AuthRefreshBody,
  AuthRegisterBody,
  AuthResendValidationEmailBody,
  AuthResetPasswordBody,
  AuthResetPasswordRequestBody,
  AuthValidateAccountBody,
  ErrorResponse,
  HealthcheckResponse,
  LoginTokens,
  RefreshTokens,
  ResetPasswordResponse
} from '.././models';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const authLoginApi = (authLoginBody: AuthLoginBody, options?: AxiosRequestConfig): Promise<AxiosResponse<LoginTokens>> => {
  return axios.default.post(`/api/public/auth/login`, authLoginBody, options);
};

export const getAuthLoginApiMutationOptions = <TError = AxiosError<ErrorResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof authLoginApi>>, TError, { data: AuthLoginBody }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof authLoginApi>>, TError, { data: AuthLoginBody }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof authLoginApi>>, { data: AuthLoginBody }> = (props) => {
    const { data } = props ?? {};

    return authLoginApi(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthLoginApiMutationResult = NonNullable<Awaited<ReturnType<typeof authLoginApi>>>;
export type AuthLoginApiMutationBody = AuthLoginBody;
export type AuthLoginApiMutationError = AxiosError<ErrorResponse>;

export const useAuthLoginApi = <TError = AxiosError<ErrorResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof authLoginApi>>, TError, { data: AuthLoginBody }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof authLoginApi>>, TError, { data: AuthLoginBody }, TContext> => {
  const mutationOptions = getAuthLoginApiMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authRegisterApi = (
  authRegisterBody: AuthRegisterBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ErrorResponse>> => {
  return axios.default.post(`/api/public/auth/register`, authRegisterBody, options);
};

export const getAuthRegisterApiMutationOptions = <TError = AxiosError<ErrorResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof authRegisterApi>>, TError, { data: AuthRegisterBody }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof authRegisterApi>>, TError, { data: AuthRegisterBody }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof authRegisterApi>>, { data: AuthRegisterBody }> = (props) => {
    const { data } = props ?? {};

    return authRegisterApi(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthRegisterApiMutationResult = NonNullable<Awaited<ReturnType<typeof authRegisterApi>>>;
export type AuthRegisterApiMutationBody = AuthRegisterBody;
export type AuthRegisterApiMutationError = AxiosError<ErrorResponse>;

export const useAuthRegisterApi = <TError = AxiosError<ErrorResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof authRegisterApi>>, TError, { data: AuthRegisterBody }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof authRegisterApi>>, TError, { data: AuthRegisterBody }, TContext> => {
  const mutationOptions = getAuthRegisterApiMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authRefreshApi = (authRefreshBody: AuthRefreshBody, options?: AxiosRequestConfig): Promise<AxiosResponse<RefreshTokens>> => {
  return axios.default.post(`/api/public/auth/refresh`, authRefreshBody, options);
};

export const getAuthRefreshApiMutationOptions = <TError = AxiosError<ErrorResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof authRefreshApi>>, TError, { data: AuthRefreshBody }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof authRefreshApi>>, TError, { data: AuthRefreshBody }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof authRefreshApi>>, { data: AuthRefreshBody }> = (props) => {
    const { data } = props ?? {};

    return authRefreshApi(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthRefreshApiMutationResult = NonNullable<Awaited<ReturnType<typeof authRefreshApi>>>;
export type AuthRefreshApiMutationBody = AuthRefreshBody;
export type AuthRefreshApiMutationError = AxiosError<ErrorResponse>;

export const useAuthRefreshApi = <TError = AxiosError<ErrorResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof authRefreshApi>>, TError, { data: AuthRefreshBody }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof authRefreshApi>>, TError, { data: AuthRefreshBody }, TContext> => {
  const mutationOptions = getAuthRefreshApiMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authResetPasswordApi = (
  authResetPasswordBody: AuthResetPasswordBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ResetPasswordResponse>> => {
  return axios.default.post(`/api/public/auth/reset-password`, authResetPasswordBody, options);
};

export const getAuthResetPasswordApiMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof authResetPasswordApi>>, TError, { data: AuthResetPasswordBody }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof authResetPasswordApi>>, TError, { data: AuthResetPasswordBody }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof authResetPasswordApi>>, { data: AuthResetPasswordBody }> = (props) => {
    const { data } = props ?? {};

    return authResetPasswordApi(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthResetPasswordApiMutationResult = NonNullable<Awaited<ReturnType<typeof authResetPasswordApi>>>;
export type AuthResetPasswordApiMutationBody = AuthResetPasswordBody;
export type AuthResetPasswordApiMutationError = AxiosError<unknown>;

export const useAuthResetPasswordApi = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof authResetPasswordApi>>, TError, { data: AuthResetPasswordBody }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof authResetPasswordApi>>, TError, { data: AuthResetPasswordBody }, TContext> => {
  const mutationOptions = getAuthResetPasswordApiMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authResetPasswordRequestApi = (
  authResetPasswordRequestBody: AuthResetPasswordRequestBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ErrorResponse>> => {
  return axios.default.post(`/api/public/auth/reset-password-request`, authResetPasswordRequestBody, options);
};

export const getAuthResetPasswordRequestApiMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authResetPasswordRequestApi>>,
    TError,
    { data: AuthResetPasswordRequestBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authResetPasswordRequestApi>>,
  TError,
  { data: AuthResetPasswordRequestBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof authResetPasswordRequestApi>>, { data: AuthResetPasswordRequestBody }> = (
    props
  ) => {
    const { data } = props ?? {};

    return authResetPasswordRequestApi(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthResetPasswordRequestApiMutationResult = NonNullable<Awaited<ReturnType<typeof authResetPasswordRequestApi>>>;
export type AuthResetPasswordRequestApiMutationBody = AuthResetPasswordRequestBody;
export type AuthResetPasswordRequestApiMutationError = AxiosError<unknown>;

export const useAuthResetPasswordRequestApi = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authResetPasswordRequestApi>>,
    TError,
    { data: AuthResetPasswordRequestBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof authResetPasswordRequestApi>>,
  TError,
  { data: AuthResetPasswordRequestBody },
  TContext
> => {
  const mutationOptions = getAuthResetPasswordRequestApiMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authValidateAccountApi = (
  authValidateAccountBody: AuthValidateAccountBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ErrorResponse>> => {
  return axios.default.post(`/api/public/auth/validate-account`, authValidateAccountBody, options);
};

export const getAuthValidateAccountApiMutationOptions = <TError = AxiosError<ErrorResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof authValidateAccountApi>>, TError, { data: AuthValidateAccountBody }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof authValidateAccountApi>>, TError, { data: AuthValidateAccountBody }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof authValidateAccountApi>>, { data: AuthValidateAccountBody }> = (props) => {
    const { data } = props ?? {};

    return authValidateAccountApi(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthValidateAccountApiMutationResult = NonNullable<Awaited<ReturnType<typeof authValidateAccountApi>>>;
export type AuthValidateAccountApiMutationBody = AuthValidateAccountBody;
export type AuthValidateAccountApiMutationError = AxiosError<ErrorResponse>;

export const useAuthValidateAccountApi = <TError = AxiosError<ErrorResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof authValidateAccountApi>>, TError, { data: AuthValidateAccountBody }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof authValidateAccountApi>>, TError, { data: AuthValidateAccountBody }, TContext> => {
  const mutationOptions = getAuthValidateAccountApiMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authResendValidationEmailApi = (
  authResendValidationEmailBody: AuthResendValidationEmailBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ErrorResponse>> => {
  return axios.default.post(`/api/public/auth/resend-validation-email`, authResendValidationEmailBody, options);
};

export const getAuthResendValidationEmailApiMutationOptions = <TError = AxiosError<ErrorResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authResendValidationEmailApi>>,
    TError,
    { data: AuthResendValidationEmailBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authResendValidationEmailApi>>,
  TError,
  { data: AuthResendValidationEmailBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof authResendValidationEmailApi>>, { data: AuthResendValidationEmailBody }> = (
    props
  ) => {
    const { data } = props ?? {};

    return authResendValidationEmailApi(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthResendValidationEmailApiMutationResult = NonNullable<Awaited<ReturnType<typeof authResendValidationEmailApi>>>;
export type AuthResendValidationEmailApiMutationBody = AuthResendValidationEmailBody;
export type AuthResendValidationEmailApiMutationError = AxiosError<ErrorResponse>;

export const useAuthResendValidationEmailApi = <TError = AxiosError<ErrorResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authResendValidationEmailApi>>,
    TError,
    { data: AuthResendValidationEmailBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof authResendValidationEmailApi>>,
  TError,
  { data: AuthResendValidationEmailBody },
  TContext
> => {
  const mutationOptions = getAuthResendValidationEmailApiMutationOptions(options);

  return useMutation(mutationOptions);
};
export const healthcheckApi = (options?: AxiosRequestConfig): Promise<AxiosResponse<HealthcheckResponse>> => {
  return axios.default.get(`/api/public/healthcheck`, options);
};

export const getHealthcheckApiQueryKey = () => {
  return [`/api/public/healthcheck`] as const;
};

export const getHealthcheckApiQueryOptions = <TData = Awaited<ReturnType<typeof healthcheckApi>>, TError = AxiosError<unknown>>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof healthcheckApi>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHealthcheckApiQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof healthcheckApi>>> = ({ signal }) => healthcheckApi({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof healthcheckApi>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type HealthcheckApiQueryResult = NonNullable<Awaited<ReturnType<typeof healthcheckApi>>>;
export type HealthcheckApiQueryError = AxiosError<unknown>;

export function useHealthcheckApi<TData = Awaited<ReturnType<typeof healthcheckApi>>, TError = AxiosError<unknown>>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof healthcheckApi>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof healthcheckApi>>, TError, TData>, 'initialData'>;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHealthcheckApi<TData = Awaited<ReturnType<typeof healthcheckApi>>, TError = AxiosError<unknown>>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof healthcheckApi>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof healthcheckApi>>, TError, TData>, 'initialData'>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useHealthcheckApi<TData = Awaited<ReturnType<typeof healthcheckApi>>, TError = AxiosError<unknown>>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof healthcheckApi>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useHealthcheckApi<TData = Awaited<ReturnType<typeof healthcheckApi>>, TError = AxiosError<unknown>>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof healthcheckApi>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getHealthcheckApiQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchHealthcheckApi = async <TData = Awaited<ReturnType<typeof healthcheckApi>>, TError = AxiosError<unknown>>(
  queryClient: QueryClient,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof healthcheckApi>>, TError, TData>>; axios?: AxiosRequestConfig }
): Promise<QueryClient> => {
  const queryOptions = getHealthcheckApiQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
