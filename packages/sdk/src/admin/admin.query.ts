/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * My API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type { ErrorResponse, GetApiAdminUserId200 } from '.././models';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getApiAdminUserId = (
  id: string | undefined | null,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetApiAdminUserId200>> => {
  return axios.default.get(`/api/admin/user/${encodeURIComponent(String(id))}`, options);
};

export const getGetApiAdminUserIdQueryKey = (id: string | undefined | null) => {
  return [`/api/admin/user/${id}`] as const;
};

export const getGetApiAdminUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiAdminUserId>>, TError = AxiosError<ErrorResponse>>(
  id: string | undefined | null,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData>>; axios?: AxiosRequestConfig }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAdminUserIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAdminUserId>>> = ({ signal }) =>
    getApiAdminUserId(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAdminUserId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiAdminUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAdminUserId>>>;
export type GetApiAdminUserIdQueryError = AxiosError<ErrorResponse>;

export function useGetApiAdminUserId<TData = Awaited<ReturnType<typeof getApiAdminUserId>>, TError = AxiosError<ErrorResponse>>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiAdminUserId<TData = Awaited<ReturnType<typeof getApiAdminUserId>>, TError = AxiosError<ErrorResponse>>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData>, 'initialData'>;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiAdminUserId<TData = Awaited<ReturnType<typeof getApiAdminUserId>>, TError = AxiosError<ErrorResponse>>(
  id: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData>>; axios?: AxiosRequestConfig }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiAdminUserId<TData = Awaited<ReturnType<typeof getApiAdminUserId>>, TError = AxiosError<ErrorResponse>>(
  id: string | undefined | null,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData>>; axios?: AxiosRequestConfig }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiAdminUserIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetApiAdminUserId = async <TData = Awaited<ReturnType<typeof getApiAdminUserId>>, TError = AxiosError<ErrorResponse>>(
  queryClient: QueryClient,
  id: string | undefined | null,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUserId>>, TError, TData>>; axios?: AxiosRequestConfig }
): Promise<QueryClient> => {
  const queryOptions = getGetApiAdminUserIdQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
