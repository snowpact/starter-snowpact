/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * My API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  ErrorResponse,
  GetApiAdminUserId200,
  HealthcheckResponse,
  LoginTokens,
  PostApiPublicAuthLoginBody,
  PostApiPublicAuthRefreshBody,
  PostApiPublicAuthRegisterBody,
  PostApiPublicAuthResendValidationEmailBody,
  PostApiPublicAuthResetPasswordBody,
  PostApiPublicAuthResetPasswordRequestBody,
  PostApiPublicAuthValidateAccountBody,
  RefreshTokens,
  ResetPasswordResponse,
} from "./index.schemas";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getApiAdminUserId = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiAdminUserId200>> => {
  return axios.get(`/api/admin/user/:id`, options);
};

export const getGetApiAdminUserIdQueryKey = () => {
  return [`/api/admin/user/:id`] as const;
};

export const getGetApiAdminUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAdminUserId>>,
  TError = AxiosError<ErrorResponse>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiAdminUserId>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAdminUserIdQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAdminUserId>>
  > = ({ signal }) => getApiAdminUserId({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAdminUserId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiAdminUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAdminUserId>>
>;
export type GetApiAdminUserIdQueryError = AxiosError<ErrorResponse>;

export function useGetApiAdminUserId<
  TData = Awaited<ReturnType<typeof getApiAdminUserId>>,
  TError = AxiosError<ErrorResponse>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiAdminUserId>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiAdminUserIdQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiPublicAuthLogin = (
  postApiPublicAuthLoginBody: PostApiPublicAuthLoginBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<LoginTokens>> => {
  return axios.post(
    `/api/public/auth/login`,
    postApiPublicAuthLoginBody,
    options,
  );
};

export const getPostApiPublicAuthLoginMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthLogin>>,
    TError,
    { data: PostApiPublicAuthLoginBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPublicAuthLogin>>,
  TError,
  { data: PostApiPublicAuthLoginBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPublicAuthLogin>>,
    { data: PostApiPublicAuthLoginBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiPublicAuthLogin(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPublicAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPublicAuthLogin>>
>;
export type PostApiPublicAuthLoginMutationBody = PostApiPublicAuthLoginBody;
export type PostApiPublicAuthLoginMutationError = AxiosError<ErrorResponse>;

export const usePostApiPublicAuthLogin = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthLogin>>,
    TError,
    { data: PostApiPublicAuthLoginBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiPublicAuthLogin>>,
  TError,
  { data: PostApiPublicAuthLoginBody },
  TContext
> => {
  const mutationOptions = getPostApiPublicAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiPublicAuthRegister = (
  postApiPublicAuthRegisterBody: PostApiPublicAuthRegisterBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ErrorResponse>> => {
  return axios.post(
    `/api/public/auth/register`,
    postApiPublicAuthRegisterBody,
    options,
  );
};

export const getPostApiPublicAuthRegisterMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthRegister>>,
    TError,
    { data: PostApiPublicAuthRegisterBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPublicAuthRegister>>,
  TError,
  { data: PostApiPublicAuthRegisterBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPublicAuthRegister>>,
    { data: PostApiPublicAuthRegisterBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiPublicAuthRegister(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPublicAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPublicAuthRegister>>
>;
export type PostApiPublicAuthRegisterMutationBody =
  PostApiPublicAuthRegisterBody;
export type PostApiPublicAuthRegisterMutationError = AxiosError<ErrorResponse>;

export const usePostApiPublicAuthRegister = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthRegister>>,
    TError,
    { data: PostApiPublicAuthRegisterBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiPublicAuthRegister>>,
  TError,
  { data: PostApiPublicAuthRegisterBody },
  TContext
> => {
  const mutationOptions = getPostApiPublicAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiPublicAuthRefresh = (
  postApiPublicAuthRefreshBody: PostApiPublicAuthRefreshBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<RefreshTokens>> => {
  return axios.post(
    `/api/public/auth/refresh`,
    postApiPublicAuthRefreshBody,
    options,
  );
};

export const getPostApiPublicAuthRefreshMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthRefresh>>,
    TError,
    { data: PostApiPublicAuthRefreshBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPublicAuthRefresh>>,
  TError,
  { data: PostApiPublicAuthRefreshBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPublicAuthRefresh>>,
    { data: PostApiPublicAuthRefreshBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiPublicAuthRefresh(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPublicAuthRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPublicAuthRefresh>>
>;
export type PostApiPublicAuthRefreshMutationBody = PostApiPublicAuthRefreshBody;
export type PostApiPublicAuthRefreshMutationError = AxiosError<ErrorResponse>;

export const usePostApiPublicAuthRefresh = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthRefresh>>,
    TError,
    { data: PostApiPublicAuthRefreshBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiPublicAuthRefresh>>,
  TError,
  { data: PostApiPublicAuthRefreshBody },
  TContext
> => {
  const mutationOptions = getPostApiPublicAuthRefreshMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiPublicAuthResetPassword = (
  postApiPublicAuthResetPasswordBody: PostApiPublicAuthResetPasswordBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ResetPasswordResponse>> => {
  return axios.post(
    `/api/public/auth/reset-password`,
    postApiPublicAuthResetPasswordBody,
    options,
  );
};

export const getPostApiPublicAuthResetPasswordMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthResetPassword>>,
    TError,
    { data: PostApiPublicAuthResetPasswordBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPublicAuthResetPassword>>,
  TError,
  { data: PostApiPublicAuthResetPasswordBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPublicAuthResetPassword>>,
    { data: PostApiPublicAuthResetPasswordBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiPublicAuthResetPassword(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPublicAuthResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPublicAuthResetPassword>>
>;
export type PostApiPublicAuthResetPasswordMutationBody =
  PostApiPublicAuthResetPasswordBody;
export type PostApiPublicAuthResetPasswordMutationError = AxiosError<unknown>;

export const usePostApiPublicAuthResetPassword = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthResetPassword>>,
    TError,
    { data: PostApiPublicAuthResetPasswordBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiPublicAuthResetPassword>>,
  TError,
  { data: PostApiPublicAuthResetPasswordBody },
  TContext
> => {
  const mutationOptions =
    getPostApiPublicAuthResetPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiPublicAuthResetPasswordRequest = (
  postApiPublicAuthResetPasswordRequestBody: PostApiPublicAuthResetPasswordRequestBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ErrorResponse>> => {
  return axios.post(
    `/api/public/auth/reset-password-request`,
    postApiPublicAuthResetPasswordRequestBody,
    options,
  );
};

export const getPostApiPublicAuthResetPasswordRequestMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthResetPasswordRequest>>,
    TError,
    { data: PostApiPublicAuthResetPasswordRequestBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPublicAuthResetPasswordRequest>>,
  TError,
  { data: PostApiPublicAuthResetPasswordRequestBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPublicAuthResetPasswordRequest>>,
    { data: PostApiPublicAuthResetPasswordRequestBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiPublicAuthResetPasswordRequest(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPublicAuthResetPasswordRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPublicAuthResetPasswordRequest>>
>;
export type PostApiPublicAuthResetPasswordRequestMutationBody =
  PostApiPublicAuthResetPasswordRequestBody;
export type PostApiPublicAuthResetPasswordRequestMutationError =
  AxiosError<unknown>;

export const usePostApiPublicAuthResetPasswordRequest = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthResetPasswordRequest>>,
    TError,
    { data: PostApiPublicAuthResetPasswordRequestBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiPublicAuthResetPasswordRequest>>,
  TError,
  { data: PostApiPublicAuthResetPasswordRequestBody },
  TContext
> => {
  const mutationOptions =
    getPostApiPublicAuthResetPasswordRequestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiPublicAuthValidateAccount = (
  postApiPublicAuthValidateAccountBody: PostApiPublicAuthValidateAccountBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ErrorResponse>> => {
  return axios.post(
    `/api/public/auth/validate-account`,
    postApiPublicAuthValidateAccountBody,
    options,
  );
};

export const getPostApiPublicAuthValidateAccountMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthValidateAccount>>,
    TError,
    { data: PostApiPublicAuthValidateAccountBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPublicAuthValidateAccount>>,
  TError,
  { data: PostApiPublicAuthValidateAccountBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPublicAuthValidateAccount>>,
    { data: PostApiPublicAuthValidateAccountBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiPublicAuthValidateAccount(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPublicAuthValidateAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPublicAuthValidateAccount>>
>;
export type PostApiPublicAuthValidateAccountMutationBody =
  PostApiPublicAuthValidateAccountBody;
export type PostApiPublicAuthValidateAccountMutationError =
  AxiosError<ErrorResponse>;

export const usePostApiPublicAuthValidateAccount = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthValidateAccount>>,
    TError,
    { data: PostApiPublicAuthValidateAccountBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiPublicAuthValidateAccount>>,
  TError,
  { data: PostApiPublicAuthValidateAccountBody },
  TContext
> => {
  const mutationOptions =
    getPostApiPublicAuthValidateAccountMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiPublicAuthResendValidationEmail = (
  postApiPublicAuthResendValidationEmailBody: PostApiPublicAuthResendValidationEmailBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ErrorResponse>> => {
  return axios.post(
    `/api/public/auth/resend-validation-email`,
    postApiPublicAuthResendValidationEmailBody,
    options,
  );
};

export const getPostApiPublicAuthResendValidationEmailMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthResendValidationEmail>>,
    TError,
    { data: PostApiPublicAuthResendValidationEmailBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPublicAuthResendValidationEmail>>,
  TError,
  { data: PostApiPublicAuthResendValidationEmailBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPublicAuthResendValidationEmail>>,
    { data: PostApiPublicAuthResendValidationEmailBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiPublicAuthResendValidationEmail(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPublicAuthResendValidationEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPublicAuthResendValidationEmail>>
>;
export type PostApiPublicAuthResendValidationEmailMutationBody =
  PostApiPublicAuthResendValidationEmailBody;
export type PostApiPublicAuthResendValidationEmailMutationError =
  AxiosError<ErrorResponse>;

export const usePostApiPublicAuthResendValidationEmail = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPublicAuthResendValidationEmail>>,
    TError,
    { data: PostApiPublicAuthResendValidationEmailBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiPublicAuthResendValidationEmail>>,
  TError,
  { data: PostApiPublicAuthResendValidationEmailBody },
  TContext
> => {
  const mutationOptions =
    getPostApiPublicAuthResendValidationEmailMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiPublicHealthcheck = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<HealthcheckResponse>> => {
  return axios.get(`/api/public/healthcheck`, options);
};

export const getGetApiPublicHealthcheckQueryKey = () => {
  return [`/api/public/healthcheck`] as const;
};

export const getGetApiPublicHealthcheckQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPublicHealthcheck>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiPublicHealthcheck>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiPublicHealthcheckQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiPublicHealthcheck>>
  > = ({ signal }) => getApiPublicHealthcheck({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPublicHealthcheck>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiPublicHealthcheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPublicHealthcheck>>
>;
export type GetApiPublicHealthcheckQueryError = AxiosError<unknown>;

export function useGetApiPublicHealthcheck<
  TData = Awaited<ReturnType<typeof getApiPublicHealthcheck>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiPublicHealthcheck>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiPublicHealthcheckQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
